{"version":3,"sources":["components/NewsCard.js","components/NewsCards.js","App.js","serviceWorker.js","index.js"],"names":["NewsCard","article","description","publishedAt","source","title","url","urlToImage","i","activeArticle","useState","elRefs","setElRefs","useEffect","refs","Array","fill","map","_","j","createRef","ref","console","log","window","scroll","current","offsetTop","Col","Card","className","style","width","height","Header","display","flex","Date","toDateString","name","Img","variant","src","Body","Subtitle","Text","Footer","Button","href","target","infoCards","color","text","info","NewsCards","articles","length","infoCard","index","key","backgroundColor","Title","split","App","newsArticles","setNewsArticles","setActiveArticle","alanBtn","process","onCommand","command","number","prevActiveArticle","parsedNumber","wordsToNumbers","fuzzy","playText","open","Container","Row","alt","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1b012de2.chunk.js","sourcesContent":["import React, { useState, useEffect, createRef } from \"react\";\nimport { Card, Col, Button } from \"react-bootstrap\";\nimport FadeIn from \"react-fade-in\";\n\nexport default function NewsCard({\n  article: { description, publishedAt, source, title, url, urlToImage },\n  i,\n  activeArticle,\n}) {\n  const [elRefs, setElRefs] = useState([]);\n  const scrollToRef = (ref) => window.scroll(0, ref.current.offsetTop - 50);\n\n  useEffect(() => {\n    setElRefs((refs) =>\n      Array(20)\n        .fill()\n        .map((_, j) => refs[j] || createRef())\n    );\n  }, []);\n\n  useEffect(() => {\n    console.log(\"index:\", i, \", active article:\", activeArticle);\n    if (i === activeArticle && elRefs[activeArticle]) {\n      scrollToRef(elRefs[activeArticle]);\n    }\n  }, [i, activeArticle, elRefs]);\n\n  return (\n    <Col ref={elRefs[i]}>\n      <FadeIn>\n        <Card className=\"m-2 mx-auto\" style={{ width: \"25rem\", height: 500 }}>\n          <Card.Header>\n            <div style={{ display: \"flex\" }}>\n              <small style={{ flex: 1 }}>\n                {new Date(publishedAt).toDateString()}\n              </small>\n              <small style={{ flex: 1 }}>{source.name}</small>\n            </div>\n          </Card.Header>\n          <Card.Img\n            variant=\"top\"\n            width=\"100%\"\n            height={200}\n            src={\n              urlToImage ||\n              \"https://upload.wikimedia.org/wikipedia/commons/0/0f/Neon_sign_NEWS.jpg\"\n            }\n          />\n          <Card.Body className=\"m-2\">\n            <Card.Subtitle>{title}</Card.Subtitle>\n            <Card.Text className=\"text-truncate\">{description}</Card.Text>\n          </Card.Body>\n          <Card.Footer className=\"text-muted\">\n            <div style={{ display: \"flex\" }}>\n              <Button\n                style={{ flex: 1 }}\n                variant=\"light\"\n                href={url}\n                target=\"_blank\"\n              >\n                Learn More\n              </Button>\n              <Button\n                style={{ flex: 1 }}\n                variant=\"light\"\n                href={url}\n                target=\"_blank\"\n              >\n                {i + 1}\n              </Button>\n            </div>\n          </Card.Footer>\n        </Card>\n      </FadeIn>\n    </Col>\n  );\n}\n","import React from \"react\";\nimport NewsCard from \"./NewsCard\";\nimport { Card, Col } from \"react-bootstrap\";\nimport FadeIn from \"react-fade-in\";\n\n// 00838f\nconst infoCards = [\n  { color: \"#1b262c\", title: \"Latest News\", text: \"Give me the latest news\" },\n  {\n    color: \"#0f4c75\",\n    title: \"News by Categories\",\n    info:\n      \"Business, Entertainment, General, Health, Science, Sports, Technology\",\n    text: \"Give me the latest Technology news\",\n  },\n  {\n    color: \"#3282b8\",\n    title: \"News by Terms\",\n    info: \"Bitcoin, PlayStation 5, Smartphones, Donald Trump...\",\n    text: \"What's up with PlayStation 5\",\n  },\n  {\n    color: \"#150485\",\n    title: \"News by Sources\",\n    info: \"CNN, Wired, BBC News, Time, IGN, Buzzfeed, ABC News...\",\n    text: \"Give me the news from CNN\",\n  },\n];\n\nexport default function NewsCards({ articles, activeArticle }) {\n  if (!articles.length) {\n    return (\n      <>\n        {infoCards.map((infoCard, index) => (\n          <Col key={index}>\n            <FadeIn>\n              <Card\n                className=\"p-5 m-2 mx-auto\"\n                style={{\n                  backgroundColor: infoCard.color,\n                  width: \"25rem\",\n                  height: 300,\n                }}\n              >\n                <Card.Title style={{ color: \"white\" }}>\n                  {infoCard.title}\n                </Card.Title>\n                <Card.Body>\n                  {infoCard.info ? (\n                    <h6>\n                      <strong style={{ color: \"white\" }}>\n                        {infoCard.title.split(\" \")[2]}:\n                      </strong>\n                      <br />\n                      <span style={{ color: \"white\" }}>{infoCard.info}</span>\n                    </h6>\n                  ) : null}\n                  <br />\n                  <Card.Text style={{ color: \"white\" }}>\n                    Try saying: <br /> <i>{infoCard.text}</i>\n                  </Card.Text>\n                </Card.Body>\n              </Card>\n            </FadeIn>\n          </Col>\n        ))}\n      </>\n    );\n  }\n\n  return (\n    <>\n      {articles.map((article, i) => (\n        <NewsCard article={article} activeArticle={activeArticle} i={i} />\n      ))}\n    </>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport alanBtn from \"@alan-ai/alan-sdk-web\";\nimport wordsToNumbers from \"words-to-numbers\";\nimport { Container, Row } from \"react-bootstrap\";\nimport NewsCards from \"./components/NewsCards\";\nimport FadeIn from \"react-fade-in\";\nimport \"./App.css\";\n\nfunction App() {\n  const [newsArticles, setNewsArticles] = useState([]);\n  const [activeArticle, setActiveArticle] = useState(-1);\n\n  useEffect(() => {\n    alanBtn({\n      key: process.env.REACT_APP_ALAN_API_KEY,\n      onCommand: ({ command, articles, number }) => {\n        if (command === \"newHeadlines\") {\n          setNewsArticles(articles);\n          setActiveArticle(-1);\n        } else if (command === \"highlight\") {\n          setActiveArticle((prevActiveArticle) => prevActiveArticle + 1);\n        } else if (command === \"open\") {\n          const parsedNumber =\n            number.length > 2\n              ? wordsToNumbers(number, { fuzzy: true })\n              : number;\n          const article = articles[parsedNumber - 1];\n\n          if (parsedNumber > 20) {\n            alanBtn().playText(\"Please try that again\");\n          } else if (article) {\n            window.open(article.url, \"_blank\");\n            alanBtn().playText(\"Opening...\");\n          }\n        }\n      },\n    });\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <Container>\n        <Row>\n          <FadeIn>\n            <img\n              className=\"my-5\"\n              height={350}\n              style={{ width: \"100%\" }}\n              src=\"https://alan.app/voice/images/previews/preview.jpg\"\n              alt=\"alanlogo\"\n            />\n          </FadeIn>\n        </Row>\n        <Row>\n          <NewsCards articles={newsArticles} activeArticle={activeArticle} />\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}